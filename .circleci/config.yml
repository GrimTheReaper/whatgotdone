version: 2.1
jobs:
  build-frontend:
    docker:
      - image: circleci/node:9.11.2-stretch
    steps:
      - checkout
      - run:
          name: Download npm packages
          command: npm --prefix ./web/frontend install
      - run:
          name: Lint client
          command: npm --prefix ./web/frontend run lint
      - run:
          name: Build production frontend
          command: npm --prefix ./web/frontend run build
      - persist_to_workspace:
          root: ./
          paths:
            - ./web/frontend/dist
  test-backend:
    docker:
      - image: circleci/golang:1.11
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Test go packages
          command: go test -v ./...
  e2e:
    machine: true
    steps:
      - checkout
      - run:
          name: Retrieve staging credentials from CircleCI
          command: |
            echo "$SERVICE_ACCOUNT_STAGING" | \
              base64 --decode > "${HOME}/repo/service-account-creds-staging.json"
      - run:
          name: Perform end-to-end tests.
          command: |
            cd e2e
            docker-compose up --exit-code-from cypress
      - store_artifacts:
          path: e2e/cypress/videos
      - store_artifacts:
          path: e2e/cypress/screenshots
  deploy:
    docker:
      - image: google/cloud-sdk:240.0.0
    environment:
      GCLOUD_PROJECT: whatgotdone
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Retrieve client secret from CircleCI
          command: |
            echo "$CLIENT_SECRET" | \
              base64 --decode > "${HOME}/client-secret.json"
      - run:
          name: Authenticate gcloud
          command: |
            gcloud auth activate-service-account \
              --key-file "${HOME}/client-secret.json"
      - run:
          name: Configure gcloud project
          command: gcloud config set project "${GCLOUD_PROJECT}"
      - run:
          name: Deploy to AppEngine
          command: gcloud --quiet app deploy web/app.yaml --promote
workflows:
  version: 2
  test-deploy:
    jobs:
      - build-frontend
      - test-backend:
          requires:
            - build-frontend
      - e2e
      - deploy:
          requires:
            - build-frontend
            - test-backend
            - e2e
          filters:
            branches:
              only: master
